---
- name: set processing file
  vars:
    processing_step: 1
  template:
    src: ../templates/processing_step.txt.tpl
    dest: '{{ processing_step_file }}'
    mode: '0660'
    force: no

# =============================================
# First step
# =============================================
- name: first step
  debug:
    msg: "Step 1"
  when: lookup('file', processing_step_file)|int <= 1

- name: create input folder
  file: 
    path: /home/{{ my_user }}/data/input
    state: directory
    mode: '0700'
  when: lookup('file', processing_step_file)|int <= 1

#- name: unzip files
#  shell: |
#    for i in /home/ubuntu/data/subset_buildings/*.tar;
#      do echo extracting ${i};tar -xzvf ${i} -C /home/ubuntu/data/input/;
#    done
#  when: lookup('file', processing_step_file)|int <= 1
#

- name: test if xml are wellformed
  command:
    cmd: python ../tests/test_xml_wellformed.py
  register: not_wellformed
  when: lookup('file', processing_step_file)|int <= 1

# TODO better solution here: handling not_wellformed.stderr that it exist in any case
- name: dummy
  command:
    cmd: echo ""
  register: not_wellformed
  when: not_wellformed.skipped == true 

- debug:
    var: not_wellformed

- name: end play when xml not valid
  fail: 
    msg: there is a xml, that is not wellformed
  when: not_wellformed.stderr != "" and lookup('file', processing_step_file)|int <= 1

- name: first step accomplished
  vars:
    processing_step: 2
  template:
    src: ../templates/processing_step.txt.tpl
    dest: '{{ processing_step_file }}'
    mode: '0660'
    force: yes
  when: lookup('file', processing_step_file)|int <= 1
# =============================================

# =============================================
# Second step 
# =============================================
- name: Second step
  debug:
    msg: "Step 2"
  when: lookup('file', processing_step_file)|int == 2

- name: create output folder
  file: 
    path: /home/{{ my_user }}/data/output
    state: directory
    mode: '0700'
    force: no
  when: lookup('file', processing_step_file)|int == 2

- name: create db folder
  file: 
    path: /home/{{ my_user }}/data/db
    state: directory
    mode: '0700'
    force: no
  when: lookup('file', processing_step_file)|int == 2

- name: create agi_log folder
  file: 
    path: /home/{{ my_user }}/data/log
    state: directory
    mode: '0700'
    force: no
  when: lookup('file', processing_step_file)|int == 2

# obsolete as there are ansible modules
#- name: get docker image from aws ecr
#  shell: |
#    docker login -u AWS -p $(aws ecr get-login-password) https://483277333869.dkr.ecr.eu-west-1.amazonaws.com;
#    docker pull 483277333869.dkr.ecr.eu-west-1.amazonaws.com/semesterarbeit:analyticalgraphicsinc-swayze;
#  when: lookup('file', processing_step_file)|int == 2


- name: get ecr pw
  shell: |
    aws ecr get-login-password
  register: my_pw
  when: lookup('file', processing_step_file)|int == 2

#- debug:
#    var: my_pw.stdout

- name: Log into private registry and force re-authorization
  docker_login:
    registry: https://483277333869.dkr.ecr.eu-west-1.amazonaws.com
    username: AWS
    password: "{{ my_pw.stdout }}"
    reauthorize: yes
  when: lookup('file', processing_step_file)|int == 2

- name: process to web format
  docker_container:
    name: analyticalgraphicsinc-swayze 
    image: 483277333869.dkr.ecr.eu-west-1.amazonaws.com/semesterarbeit:analyticalgraphicsinc-swayze
#    memory: 3G TODO: dynamic
#    cpu_quota: TODO: dynamic 
    volumes:
      - /home/{{ my_user }}/data/input/:/var/app/input/
      - /home/{{ my_user }}/data/output/:/var/app/output/
      - /home/{{ my_user }}/data/db/:/var/app/db/      
      - /home/{{ my_user }}/data/log/:/var/app/log/
    command: ["/root/.nvm/versions/node/v8.11.2/bin/node", "--max-old-space-size=20000", "/var/app/node_modules/.bin/roadhouse", "-i", "/var/app/input", "-o", "/var/app/output", "--db", "/var/app/db/database", "--clear-normals", "--face-normals", "--max-tiles", "1000", "-r", "UUID", "-r", "DATUM_AENDERUNG","-r","DATUM_ERSTELLUNG", "-r", "ERSTELLUNG_JAHR","-r", "ERSTELLUNG_MONAT","-r", "REVISION_JAHR","-r", "REVISION_MONAT","-r", "GRUND_AENDERUNG", "-r", "HERKUNFT","-r", "HERKUNFT_JAHR","-r", "HERKUNFT_MONAT","-r", "OBJEKTART","-r", "ORIGINAL_HERKUNFT","-r", "GEBAEUDE_NUTZUNG", "-r", "Longitude", "-r", "Latitude", "-r", "Height"]
    detach: false
  register: docker_output
  when: lookup('file', processing_step_file)|int == 2

- name: log dockeroutput
  shell: echo {{ docker_output }} > /home/{{ my_user }}/data/log/agi_log.log
  when: lookup('file', processing_step_file)|int == 2

- name: second step accomplished
  vars:
    processing_step: 3
  template:
    src: ../templates/processing_step.txt.tpl
    dest: '{{ processing_step_file }}'
    mode: '0660'
    force: yes
  when: lookup('file', processing_step_file)|int == 2
# =============================================

# =============================================
# Third step
# =============================================
- name: Third step
  debug:
    msg: "Step 3"
  when: lookup('file', processing_step_file)|int == 3

- name: copy to s3
  command:
    cmd: aws s3 cp --recursive /home/{{ my_user }}/data/output s3://3d-tiles/preview/ch.swisstopo.swisstlm3d.3d/current/
  when: lookup('file', processing_step_file)|int == 3

